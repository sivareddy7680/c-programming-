1)ARITHMETIC OPERATIONS

#include <stdio.h>

int main()
{
    int num1, num2;
    int sum, sub, mult, mod;
    float div;

    
    printf("Enter any two numbers: ");
    scanf("%d%d", &num1, &num2);

    sum = num1 + num2;
    sub = num1 - num2;
    mult = num1 * num2;
    div = (float)num1 / num2;
    mod = num1 % num2;

  
    printf("SUM = %d\n", sum);
    printf("DIFFERENCE = %d\n", sub);
    printf("PRODUCT = %d\n", mult);
    printf("QUOTIENT = %f\n", div);
    printf("MODULUS = %d", mod);

    return 0; 
}

________________________________________________________________________________________________________________

2)REVERSE NUMBERS

#include <stdio.h>

int main(){

    int Num, rev_Num = 0, remainder;

    printf("Enter the number to reverse: ");

    scanf("%d", &Num);    

    while (Num != 0){

        remainder = Num % 10;

        rev_Num = rev_Num * 10 + remainder;

        Num = Num/10;

    }    

    printf("The reversed number is: %d", rev_Num);

    return 0;
    }
--------------------------------------------------------------------------------------------------------------
3)FACTORIAL

#include <stdio.h>
int main(){
  int i,f=1,num;

  printf("Input the number : ");
  scanf("%d",&num);

  for(i=1;i<=num;i++)
      f=f*i;

  printf("The Factorial of %d is: %d\n",num,f);
}
-----------------------------------------------------------------------
4)PERFECT NUMBER

#include<stdio.h>  
#include<conio.h>  
void main()  
{  
 
int num, rem, sum = 0, i;  

printf("Enter a number\n");  
scanf("%d", &num);      

for(i = 1; i < num; i++)  
                     {  
                              rem = num % i;  
                             if (rem == 0)  
                                        {  
                                               sum = sum + i;  
                                         }  
                        }  
if (sum == num)  
                      printf(" %d is a Perfect Number");  
           else  
                      printf("\n %d is not a Perfect Number");  
getch();  
}

**********************************************************************************************
5)ELIGIBLE FOR VOTE

#include<stdio.h>
int main()
{
	int age;
	printf("enter age:");
	scanf("%d",&age);
	if(age>=18){
	
	printf("eligible to vote");
}
	else{
	
	printf("%d not eligigble ");
	printf("%d years to wait ",18-age);	
}
}

##################################################################################################
6)EVEN OR ODD NUMBER

#include <stdio.h>
int main() {
    int num;
    printf("Enter an integer: ");
    scanf("%d", &num);

    
    if(num % 2 == 0)
        printf("%d is even.", num);
    else
        printf("%d is odd.", num);
    
    return 0;
}

***************************************************************************************************
7)P TO Q  STATEMENT

#include<stdio.h>
int main()
{
	int p,q,r,i,c=0;
	printf("Enter P :");
	scanf("%d",&p);
	printf("Enter Q :");
	scanf("%d",&q);
	printf("Enter R :");
	scanf("%d",&r);
	for(i=p;i<=q;i++)
	{
		if(c!=r)
		{
			printf("%d  ",i);
			c++;
		}
		else
		{
			c++;
			continue;
		}
	}
	return 0;
}

*********************************************************************************************************
8)MULTIPLICATION TABLE

#include <stdio.h>
int main() {

  int n, i, range;
  printf("Enter m: ");
  scanf("%d", &n);

  
  do {
    printf("Enter n: ");
    scanf("%d", &range);
  } while (range <= 0);

  for (i = 1; i <= range; ++i) {
    printf("%d * %d = %d \n", n, i, n * i);
  }

  return 0;
}

*****************************************************************************************************
9)LEAP YEAR

#include <stdio.h>
int main() {
   int year;
   printf("Enter a year: ");
   scanf("%d", &year);

   
   if (year % 400 == 0) {
      printf("%d is a leap year.", year);
   }
   
   else if (year % 100 == 0) {
      printf("%d is not a leap year.", year);
   }
   
   else if (year % 4 == 0) {
      printf("%d is a leap year.", year);
   }
   
   else {
      printf("%d is not a leap year.", year);
   }

   return 0;
}

************************************************************************************************
10)SUM OF DIGITS

#include <stdio.h>
int main()
{
   int n, t, sum = 0, remainder;

   printf("Enter an integer\n");
   scanf("%d", &n);

   t = n;

   while (t != 0)
   {
      remainder = t % 10;
      sum       = sum + remainder;
      t         = t / 10;
   }

   printf("Sum of digits of %d = %d\n", n, sum);

   return 0;
}

***********************************************************************************************
11)PERMUTATION

#include <stdio.h> 
#include <string.h> 
  

void swap(char *x, char *y) 
{ 
    char temp; 
    temp = *x; 
    *x = *y; 
    *y = temp; 
} 

void permute(char *a, int l, int r) 
{ 
    int i; 
    if (l == r) 
        printf("%s\n", a); 
    else
    { 
        for (i = l; i <= r; i++) 
        { 
            swap((a + l), (a + i)); 
            permute(a, l + 1, r); 
  
            
            swap((a + l), (a + i)); 
        } 
    } 
} 
  

int main() 
{ 
    char str[] = "ABC"; 
    int n = strlen(str); 
    permute(str, 0, n-1); 
    return 0; 
}

****************************************************************************************************
12)SIMPLE INTEREST

#include <stdio.h>
 
int main()
{ 
 float principle, rate, sinterest;
 int time;
 
 printf("Enter Principle Amount, Rate %% per Annum and Time\n");
 scanf ("%f %f %d", &principle, &rate, &time);
 
 sinterest = (principle * rate * time)/ 100.0;
 
 printf ("Principle Amount = %5.2f\n", principle);
 printf ("Rate %% per Annum   = %5.2f%\n", rate);
 printf ("Time   = %d years\n", time);
 printf ("Simple Interest  = %5.2f\n", sinterest);
}

****************************************************************************************************
13)ARMSTRONG NUMBER

#include <stdio.h>

int main()
{
    int i, originalNum, num, lastDigit, sum;
    long fact;

   
    printf("Enter any number to check Strong number: ");
    scanf("%d", &num);

    
    originalNum = num;

    sum = 0;

    
    while(num > 0)
    {

        
        lastDigit = num % 10;

        
        fact = 1;
        for(i=1; i<=lastDigit; i++)
        {
            fact = fact * i;
        }

        
        sum = sum + fact;

        num = num / 10;
    }

    
    if(sum == originalNum)
    {
        printf("%d is STRONG NUMBER", originalNum);
    }
    else
    {
        printf("%d is NOT STRONG NUMBER", originalNum);
    }

    return 0;
}

************************************************************************************************
14)NTH PRIME NUMBER

#include <stdio.h>
#include<math.h>
int
main ()
{
  int rangenumber, c = 0, num = 2, i, letest = 0;
  printf ("Enter Nth Number\n");
  scanf ("%d", &rangenumber);

  while (c != rangenumber)
    {
      int count = 0;
      for (i = 2; i <= sqrt (num); i++)
 {
   if (num % i == 0)
     {
       count++;
       break;
     }
 }
      if (count == 0)
 {
   c++;
   letest = num;
 }
      num = num + 1;
    }
  printf ("%dth prime number is %d ",rangenumber,letest);
  return 0;
}

***************************************************************************************************
15)PYTHAGEREAN

#include<stdio.h>
main(){
    int initial,final,a,b,c,m,n;
    printf("Enter the range in which you want to search for Pythagorean Triplets:\nInitial: ");
    scanf("%d",&initial);
    printf("\nFinal: ");
    scanf("%d",&final);
    printf("The Pythogorean Triplets in the given range are as follows:\n____________________________________________________________\n");
    for(m=initial;m<=final;m++){
        for(n=initial;n<=final;n++){
            a=m*m-n*n;
            b=2*m*n;
            c=m*m+n*n;
            if(a<=final&&b<=final&&c<=final&&a>=initial&&b>=initial&&c>=initial){
                printf("%d , %d , %d\n",a,b,c); 
            }
        }
    }
}

*******************************************************************************************************
                             

                                     DAY 2

1)COMPOSITE NUMBER

#include<stdio.h>
int main (){
    int i,n,a[100],count=0;
    printf("enter size:");
    scanf("%d",&n);
    printf("enter elements\n");
    for(i=0;i<n;i++){
        scanf("%d",&a[i]);
    }
    for(i=0;i<n;i++){
       if(a[i]==2){
          continue;
       }       
        else if(a[i]%2==0){
         count++;
        }
    }
        if(count>2){    
        }
       printf("total composite number are: %d",count);
 }

************************************************************************************************
2)NEGATIVE NUMBERS IN AN ARRAY

#include<stdio.h>
 
int main()
{
 int Size, i, a[10];
 
 printf("\n Please Enter the Size of an Array :  ");
 scanf("%d", &Size);
 
 printf("\n Please Enter the Array Elements  :  ");
 for(i = 0; i < Size; i++)
 {
      scanf("%d", &a[i]);
 }
 
 printf("\n List of Negative Numbers in this Array  :  "); 
 for(i = 0; i < Size; i ++)
 {
   if(a[i] < 0)
   {
	   	printf("%d  ", a[i]);
   }
 }
 return 0;
}

*************************************************************************************************************
3)REVERSE AN ARRAY

#include <stdio.h>    
     
int main()    
{    
         
    int arr[] = {1, 2, 3, 4, 5};     
        
      
    int length = sizeof(arr)/sizeof(arr[0]);    
        
    printf("Original array: \n");    
    for (int i = 0; i < length; i++) {     
        printf("%d ", arr[i]);     
    }      
        
    printf("\n");    
        
    printf("Array in reverse order: \n");    
      
    for (int i = length-1; i >= 0; i--) {     
        printf("%d ", arr[i]);     
    }     
    return 0;    
}   

*****************************************************************************************************
4)TRANSPOSE MATRIX

#include <stdio.h>
#define N 4
 
void transpose(int A[][N], int B[][N])
{
    int i, j;
    for (i = 0; i < N; i++)
        for (j = 0; j < N; j++)
            B[i][j] = A[j][i];
}
 

int main()
{
    int A[N][N] = { { 1, 1, 1, 1 },
                    { 2, 2, 2, 2 },
                    { 3, 3, 3, 3 },
                    { 4, 4, 4, 4 } };
 
    
    int B[N][N], i, j;
 
     
    transpose(A, B);
 
    printf("Result matrix is \n");
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++)
            printf("%d ", B[i][j]);
        printf("\n");
    }
 
    return 0;
}

*********************************************************************************************************
5)REMOVE DUPLICATES

#include <stdio.h>
 

int removeDuplicates(int arr[], int n)
{
    
    if (n == 0 || n == 1)
        return n;
 
    int temp[n];
 
    
    int j = 0;
    
    for (int i = 0; i < n - 1; i++)
        if (arr[i] != arr[i + 1])
            temp[j++] = arr[i];
 
    
    temp[j++] = arr[n - 1];
 
    // Modify original array
    for (int i = 0; i < j; i++)
        arr[i] = temp[i];
 
    return j;
}
 

int main()
{
    int arr[] = { 1, 2, 2, 3, 4, 4, 4, 5, 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    
    n = removeDuplicates(arr, n);
 
    
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

****************************************************************************************************
6)DIAGONAL MATRIX

#include <stdio.h>
 
const int M = 4;
const int N = 4;
 
void printDiagonalSums(int mat[M][N])
{
    int principal = 0, secondary = 0;
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
                        if (i == j)
                principal += mat[i][j];
 
           
            if ((i + j) == (N - 1))
                secondary += mat[i][j];
        }
    }
 
    printf("%s", "Principal Diagonal:");
    printf("%d\n", principal);
    printf("%s", "Secondary Diagonal:");
    printf("%d\n", secondary);
}
 
int main()
{
    int a[][4] = {{1, 2, 3, 4},
                  {5, 6, 7, 8},
                  {1, 2, 3, 4},
                  {5, 6, 7, 8}};
    printDiagonalSums(a);
    return 0;
}  
*******************************************************************************************
7)MINIMUM AND MAXIMUM
                              
#include <stdio.h>
 #include <conio.h>
 
 
int main()
{
    int a[1000],i,n,min,max;
   
    printf("Enter size of the array : ");
    scanf("%d",&n);
 
    printf("Enter elements in array : ");
    for(i=0; i<n; i++)
    {
        scanf("%d",&a[i]);
    }
 
    min=max=a[0];
    for(i=1; i<n; i++)
    {
         if(min>a[i])
		  min=a[i];   
		   if(max<a[i])
		    max=a[i];       
    }
     printf("minimum of array is : %d",min);
          printf("\nmaximum of array is : %d",max);
 
 
    return 0;
}

********************************************************************************************************
8)NTH MAX & NTH MIN

#include <stdio.h>

int main()
{
    int arr1[100];
    int i, mx, mn, n;
	
	
       printf("\n\nFind maximum and minimum element in an array :\n");
       printf("--------------------------------------------------\n");	

       printf("Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
            {
	      printf("element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }


    mx = arr1[0];
    mn = arr1[0];

    for(i=1; i<n; i++)
    {
        if(arr1[i]>mx)
        {
            mx = arr1[i];
        }


        if(arr1[i]<mn)
        {
            mn = arr1[i];
        }
    }
    printf("Maximum element is : %d\n", mx);
    printf("Minimum element is : %d\n\n", mn);
}

********************************************************************************************************
9)BINARY SEARCH

#include<stdio.h>
int main()
{
    int c, first, last, middle, n, search, array[100];
    printf("Enter number of elements\n");
    scanf("%d",&n);
    printf("Enter %d integers\n", n);
    for ( c = 0 ; c < n ; c++ )
        scanf("%d",&array[c]);
    printf("Enter value to find\n");
    scanf("%d",&search);
    first = 0;
    last = n - 1;
    middle = (first+last)/2;
    while( first <= last )
    {
        if ( array[middle] < search )
            first = middle + 1;
        else if ( array[middle] == search )
        {
            printf("%d found at location %d.\n", search, middle+1);
            break;
        }
        else
            last = middle - 1;
        middle = (first + last)/2;
    }
    if ( first > last )
        printf("Not found! %d is not present in the list.\n", search);
    return 0;
}
************************************************************************************************************************

                                              DAY 3

1)ADD TWO NUMBERS USING POINTERS

#include <stdio.h>
int main()
{
	int a,b;
	int *p,*q;
	scanf("%d%d",&a,&b);
	printf("%d\n",a+b);
	p=&a;
	q=&b;
	printf("%d",*p+*q);
}
*****************************************************************************************

2)BIG OF TWO NUMBERS USING POINTERS

#include <stdio.h>
int main()
{
	int a,b,big;
	int *p,*q;
	scanf("%d%d",&a,&b);
	p=&a;
	q=&b;
	if(*p>*q)
	big=*p;
	else
	big=*q;
	printf("BIG=%d",big);
}

*******************************************************************************************
3)LARGEST NUM IN ARRAY USING DMALLOC

#include<stdio.h>
#include<stdlib.h>
int main()
{
   int i, num;
   float *data;

   printf("Enter total number of elements(1 to 100): ");
   scanf("%d",&num);

   data=(float*)calloc(num,sizeof(float));

   if(data==NULL)
   {
      printf("Error! Memory not Allocated.");
      exit(0);
   }

   printf("\n");
   for(i=0;i<num;i++)
   {
      printf("Enter element %d:",i+1);
      scanf("%f",data+i);
   }
   for(i=0;i<num;i++)
   {
      if( *data < *(data+i))
         *data = *(data+i);
   }

   printf("Largest Element = %.2f",*data);

   return 0;
}

*****************************************************************************************************
4)LENGTH OF STRING

#include<stdio.h>
#include<conio.h>
 
int string_ln(char*);
 
int main() {
   char str[20];
   int length;
  
   printf("\nEnter any string : ");
   gets(str);
   
   length = string_ln(str);
   printf("The length of the given string %s is : %d", str, length);
   getch();
}
 
int string_ln(char*p) 
{
   int count = 0;
   while (*p != '\0') {
      count++;
      p++;
   }
   return count;
}
*************************************************************************************************
5)ADD WITH CALL BY REFERENCE

#include <stdio.h>
long addTwoNumbers(long *, long *);
 
int main()
{
   long fno, sno, sum;
   
   printf("\n\n Pointer : Add two numbers using call by reference:\n"); 
   printf("-------------------------------------------------------\n");   
 
   printf(" Input the first number : ");
   scanf("%ld", &fno);
   printf(" Input the second  number : ");
   scanf("%ld", &sno);   
   sum = addTwoNumbers(&fno, &sno);
   printf(" The sum of %ld and %ld  is %ld\n\n", fno, sno, sum);
   return 0;
}
long addTwoNumbers(long *n1, long *n2) 
{
   long sum;
   sum = *n1 + *n2;
   return sum;
}

***********************************************************************************
6)STORE & RETRIEVE IN ARRAY

#include <stdio.h>
int main()
{
   int arr1[25], i,n;
   printf("\n\n Pointer : Store and retrieve elements from an array :\n"); 
   printf("------------------------------------------------------------\n");    
   printf(" Input the number of elements to store in the array :");
   scanf("%d",&n);
   
   printf(" Input %d number of elements in the array :\n",n);
   for(i=0;i<n;i++)
      {
	  printf(" element - %d : ",i);
	  scanf("%d",arr1+i);
	  }
   printf(" The elements you entered are : \n");
   for(i=0;i<n;i++)
      {
	  printf(" element - %d : %d \n",i,*(arr1+i));
	  }
	   return 0;
}

************************************************************************************************
7)SWAP

#include <stdio.h>
void swapNumbers(int *x,int *y,int *z);
int main()
{
    int e1,e2,e3;
	printf("\n\n Pointer : Swap elements using call by reference :\n"); 
	printf("------------------------------------------------------\n");	
    printf(" Input the value of 1st element : ");
    scanf("%d",&e1);
	printf(" Input the value of 2nd element : ");
    scanf("%d",&e2);
	printf(" Input the value of 3rd element : ");
    scanf("%d",&e3);
	
	
    printf("\n The value before swapping are :\n");
    printf(" element 1 = %d\n element 2 = %d\n element 3 = %d\n",e1,e2,e3);
    swapNumbers(&e1,&e2,&e3);
    printf("\n The value after swapping are :\n");
    printf(" element 1 = %d\n element 2 = %d\n element 3 = %d\n\n",e1,e2,e3);
    return 0;
}
void swapNumbers(int *x,int *y,int *z)
{
    int tmp;
    tmp=*y;
    *y=*x;
    *x=*z;
    *z=tmp;
}

*********************************************************************************************************
8)FACTORIAL USING POINTERS

# include<stdio.h>
int  main( )
{
int  num, fact=1 ;
int  *pn, *pf ;
printf(" Enter any Number : ") ;
scanf("%d ",& num) ;

pn = & num ;
pf = & fact ;

do
{
*pf = ( *pf ) * ( *pn ) ;
*pn = *pn - 1 ;
}while(  *pn > 0) ;
printf("\n Factorial of entred number is : %d ",*pf) ;
return ( 0 );
}

********************************************************************************************************
9)STUDENT GRADE

#include<stdio.h>
void main()
{
    int marks;
    printf("Enter your marks ");
    scanf("%d",&marks);
    if(marks<0 || marks>100)
    {
        printf("Wrong Entry");
    }
    else if(marks<50)
    {
        printf("Grade F");
    }
    else if(marks>=50 && marks<60)
    {
        printf("Grade D");
    }
    else if(marks>=60 && marks<70)
    {
        printf("Grade C");
    }
    else if(marks>=70 && marks<80)
    {
        printf("Grade B");
    }
    else if(marks>=80 && marks<90)
    {
        printf("Grade A");
    }
    else
    {
        printf("Grade A+");
    }
}


                                 
